name: Create Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ steps.get_tag.outputs.TAG_NAME }}^ 2>/dev/null || echo "")

          # Generate changelog
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "Initial release" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git log $PREVIOUS_TAG..${{ steps.get_tag.outputs.TAG_NAME }} --pretty=format:"- %s (%h)" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release using GitHub API
          cat > payload.json << 'EOF'
          {
            "tag_name": "${{ steps.get_tag.outputs.TAG_NAME }}",
            "name": "Release ${{ steps.get_tag.outputs.TAG_NAME }}",
            "body": ${{ toJSON(steps.changelog.outputs.CHANGELOG) }},
            "draft": false,
            "prerelease": false
          }
          EOF

          RESPONSE=$(curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d @payload.json)

          # Extract release ID and upload URL from response
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
          UPLOAD_URL=$(echo "$RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')

          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "UPLOAD_URL=$UPLOAD_URL" >> $GITHUB_OUTPUT

      - name: Get build workflow run
        id: get_build_run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the workflow runs for the build-tests workflow on this tag
          TAG_NAME="${{ steps.get_tag.outputs.TAG_NAME }}"
          WORKFLOW_RUNS=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/build-tests.yml/runs?event=push&status=success&head_branch=$TAG_NAME")

          # Get the most recent successful run ID
          RUN_ID=$(echo "$WORKFLOW_RUNS" | jq -r '.workflow_runs[0].id // empty')

          if [ -z "$RUN_ID" ]; then
            echo "Error: No successful build workflow run found for tag $TAG_NAME"
            exit 1
          fi

          echo "Found build workflow run: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          pattern: '*-package'
          merge-multiple: true
          run-id: ${{ steps.get_build_run.outputs.RUN_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload each tarball as a release asset
          for tarball in artifacts/*.tar.gz; do
            if [ -f "$tarball" ]; then
              filename=$(basename "$tarball")
              echo "Uploading $filename..."

              curl -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -H "Content-Type: application/octet-stream" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.RELEASE_ID }}/assets?name=$filename" \
                --data-binary @"$tarball"
            fi
          done

